<?php

/**
 * _CIBElement - вспомогательный класс для работы с объектами, которые возвращает CIBlockResult::GetNextElement. Для получения различных характеристик элемента рекомендуется использовать именно этот класс, т.к. использование методов этого объекта позволяет более гибко и эффективно работать с элементами информационных блоков.
 * @link https://dev.1c-bitrix.ru/api_help/iblock/classes/_cibelement/index.php
 */
class _CIBElement
{
    /**
     * Возвращает массив значений полей приведенный в HTML безопасный вид. Также в полях DETAIL_PAGE_URL и LIST_PAGE_URL заменяются шаблоны вида #IBLOCK_ID# и т.п. на их реальные значения, в результате чего в этих полях будут ссылки на страницу детального просмотра и страницу списка элементов.
     *
     * @return array Метод возвращает массив с полями элемента информационного блока вида Array("поле"=>"преобразованное значение" [, ...]).
     */
    public function GetFields(): array
    {
        return [];
    }

    /**
     * Метод возвращает значения свойств текущего элемента информационного блока.
     * Примечание: данный метод не работает, если в CIBlockElement::GetList в arSelectFields не указаны ID и IBLOCK_ID, а в arFilter не задан IBLOCK_ID.
     *
     * @param bool|array $arOrder Массив вида Array(by1=>order1[, by2=>order2 [, ..]]), где by - поле для сортировки, может принимать значения:
     * id - код свойства;
     * sort - индекс сортировки;
     * name - имя свойства;
     * active - активность свойства;
     * value_id - код значения свойства;
     * enum_sort - индекс сортировки варианта списочного свойства;
     * order - порядок сортировки, может принимать значения:
     * asc - по возрастанию;
     * desc - по убыванию;
     * @param array $arFilter Массив вида array("фильтруемое поле"=>"значения фильтра" [, ...])
     * "фильтруемое поле" может принимать значения:
     * NAME - название свойства;
     * ID - код свойства;
     * ACTIVE - активность свойства (Y|N), по умолчанию выводятся только активные свойства, если необходимо вывести все значения, то установите ACTIVE в пустое значение;
     * SEARCHABLE - участвует в поиске или нет (Y|N);
     * PROPERTY_TYPE - тип свойства;
     * CODE - символьный код свойства;
     * EMPTY - пустота значения свойства (Y|N). По умолчанию выводятся все свойства и имеющие непустые значения и без значений.
     * 
     * @return array Метод возвращает массив значений свойств, где:
     * в качестве индексов массива "Символьный код свойства" (задается в настройках информационного блока) или, если символьный код свойства не указан, то уникальный числовой ID свойства.
     * значением массива будет массив полей свойства и дополнительно поля со значениями свойства:
     * "VALUE" => "значение свойства или массив значений свойств, если свойство множественное",
     * "VALUE_ENUM_ID" => "код варианта значения для свойства типа "Список" (массив или единичное значение)",
     * "VALUE_XML_ID" => "внешний код варианта значения для свойства типа "Список" (массив или единичное значение)",
     * "DESCRIPTION" => "описание значения свойства (массив или единичное значение)",
     * "PROPERTY_VALUE_ID" => "код значения свойства (массив или единичное значение)"
     */
    function GetProperties($arOrder = false, $arFilter = array()): array
    {
        return [];
    }

    /**
     * Метод возвращает параметры свойства ID и его значения для текущего элемента информационного блока.
     *
     * @param mixed $ID Числовой или символьный код свойства.
     * @return array Метод возвращает массив полей свойства и дополнительно поля со значениями свойства:
     * VALUE => значение свойства или массив значений свойств, если свойство множественное,
     * VALUE_ENUM_ID => код варианта значения для свойства типа "Список" (массив или единичное значение),
     * DESCRIPTION => описание значения свойства (массив или единичное значение),
     * PROPERTY_VALUE_ID => код значения свойства (массив или единичное значение).
     * Примечание: если GetProperty применяется к результату работы CIBlockElement::GetList, то в arSelectFields необходимо обязательно указать IBLOCK_ID, иначе результат будет пустым.
     */
    function GetProperty($ID): array
    {
        return [];
    }

    /**
     * Возвращает группы, которым принадлежит текущий элемент и значения свойств типа "привязка к разделам" заданные для данного элемента.
     *
     * @return CDBResult Возвращается объект CDBResult с полями разделов.
     */
    function GetGroups(): CDBResult
    {
        return new CDBResult();
    }
}
